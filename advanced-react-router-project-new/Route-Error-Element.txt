# === React Router Error Handling ===

# 1. Error Element Kya Hai? 
---------------------------
Error Element ek special component hai jo React Router mein errors ko handle karta hai. Ye errors different scenarios mein ho sakte hain:

- Route not found (404)
- Data loading errors
- Component rendering errors
- API errors

# 2. Error Element Setup 
------------------------
Aap error element ko do tarike se set kar sakte hain:

# 1. Global Error Handling:
```jsx
? <Route 
?  path="/" 
?  element={<Layout />}
?  errorElement={<ErrorBoundary />}  // Pure app ke liye ek hi error handler
? >
?  <Route path="about" element={<About />} />
?  {/* other routes */}
? </Route>
```

# 2. Route-Specific Error Handling:
```jsx
? <Route path="/" element={<Layout />}>
?  <Route 
?    path="jobs"
?    element={<Jobs />}
?    loader={jobsLoader}
?    errorElement={<JobError />}  // Sirf jobs route ke liye
?  />
? </Route>
```

# 3. useRouteError Hook 
-----------------------
* useRouteError hook se aap error ki detailed information access kar sakte hain:

```jsx
? import { useRouteError } from 'react-router-dom';

? function ErrorBoundary() {
?  const error = useRouteError();
  
?  return (
?    <div className="error-container">
?      <h2>Oops! Some Error Occurred! </h2>
?
?     {/* Error type ke hisaab se different messages */}
?      {error.status === 404 ? (
?        <p>Can't find the page</p>
?      ) : error.status === 401 ? (
?        <p>You are not authorized to access this page</p>
?      ) : (
?        <p>There was a technical problem: {error.message}</p>
?      )}
?    </div>
?  );
? }
```

# 4. Practical Example (Based on Your Project)
--------------------------------------------
* Aapke jobs section mein loader errors handle karne ka example:

```jsx
# JobError.jsx

? import { useRouteError } from 'react-router-dom';

? function JobError() {
?  const error = useRouteError();

?  return (
?    <div className="min-h-screen bg-gradient-to-r from-red-500 to-pink-500 p-6">
?      <div className="bg-white/20 backdrop-blur-lg rounded-3xl p-8 max-w-2xl mx-auto text-center">
?        <h2 className="text-4xl font-bold text-white mb-4">
?          Job Details Error!
?        </h2>
?
?        <div className="text-white text-lg">
?          {error.status === 404 ? (
?            <p>Sorry, Can't find the job details</p>
?          ) : (
?            <p>Error: {error.message || 'Some error occurred'}</p>
?          )}
?        </div>

?        <button 
?          onClick={() => window.history.back()}
?          className="mt-4 bg-white text-red-500 px-6 py-2 rounded-lg hover:bg-red-100 transition"
?        >
?          Go Back
?        </button>
?      </div>
?    </div>
?  );
? }
```

# Implementation in your App.jsx:

```jsx
? <Route path="jobs" element={<JobsLayout />} errorElement={<JobError />}>
?  <Route
?    index
?    element={<Jobs />}
?    loader={jobsLoader}
?  />
?  <Route
?    path="jobDetails/:jobId"
?    element={<JobDetails />}
?    loader={jobsLoader}
?  />
? </Route>
```

# 5. Different Types of Errors
----------------------------
* 1. Loader Errors:

```jsx
# jobsLoader.js
! showed in tutorial video
? export async function jobsLoader() {
?  const response = await fetch('/api/jobs');
?  if (!response.ok) {
?    throw {
?      status: response.status,
?      message: 'Information of jobs didn't load'
?    };
?  }
?  return response.json();
? }
```

# 2. Component Errors:
```jsx
? function JobDetails() {
?  const { jobId } = useParams();
?  if (!jobId) {
?    throw {
?      status: 400,
?      message: 'Job ID not found'
?    };
?  }
?   ... `rest of the component
? }
```

# 6. Important Points
--------------------
1. errorElement parent routes se child routes tak propagate hota hai
2. Specific routes ke liye specific error handling kar sakte hain
3. useRouteError hook sirf errorElement ke andar hi kaam karega
4. Error boundary normal React errors ko bhi catch karega
5. Loader errors automatically error element ko trigger karenge

# 7. Best Practices
-----------------
1. Meaningful error messages rakhen
2. User ko next step ke liye guide karen
3. Error details development mode mein hi dikhayen
4. Recovery options provide karen (retry, go back, etc.)
5. Different error types ke liye different messages rakhen
