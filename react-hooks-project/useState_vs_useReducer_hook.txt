# -----------------------------useReducer vs useState - Real Examples-----------------------------

# useState Hook

Chalo practical scenarios dekhte hain jahan useReducer better hai:

* Bad Example - useState se Mess

Scenario: Shopping Cart Management

? function ShoppingCart() {
?  const [items, setItems] = useState([]);
?  const [total, setTotal] = useState(0);
?  const [itemCount, setItemCount] = useState(0);
?  const [discount, setDiscount] = useState(0);
?  const [loading, setLoading] = useState(false);
?  const [error, setError] = useState(null);

?  const addItem = (item) => {
?    setLoading(true);
?    setItems([...items, item]);
?    setTotal(total + item.price);
?    setItemCount(itemCount + 1);
?    setLoading(false);
?  }; 

?  const removeItem = (itemId) => {
?    const item = items.find(i => i.id === itemId);
?    setItems(items.filter(i => i.id !== itemId));
?    setTotal(total - item.price);
?    setItemCount(itemCount - 1);
?  };

?  const applyDiscount = (code) => {
?    if (code === "SAVE10") {
?      setDiscount(total * 0.1);
?      setTotal(total - (total * 0.1));
?    }
?  };
? }

! Bahut saare states, bahut saara confusion!
! Ek galti = sab kuch galat

# Problems:

6 alag-alag states manage karne pad rahe hain.
Ek action mein multiple setState calls.
States sync mein nahi rehte (bugs ka chance).
Code bahut messy aur hard to maintain.


# Good Example - useReducer se Clean

? import { useReducer } from "react";

? function ShoppingCart() {

   * Sab kuch ek jagah
   * Ek dispatch call se multiple updates
   * Logic centralized aur testable
   * Consistency guaranteed

?  const initialState = {
?    items: [],
?    total: 0,
?    itemCount: 0,
?    discount: 0,
?    loading: false,
?    error: null
?  };

  * Saare actions ek reducer mein

?  const cartReducer = (state, action) => {
?    switch (action.type) {
?      case "ADD_ITEM":
?        return {
?          ...state,
?          items: [...state.items, action.payload],
?          total: state.total + action.payload.price,
?          itemCount: state.itemCount + 1,
?          loading: false
?        };

?      case "REMOVE_ITEM":
?        const item = state.items.find(i => i.id === action.payload);
?        return {
?          ...state,
?          items: state.items.filter(i => i.id !== action.payload),
?          total: state.total - item.price,
?          itemCount: state.itemCount - 1
?        };

?      case "APPLY_DISCOUNT":
?        const discountAmount = state.total * 0.1;
?        return {
?          ...state,
?          discount: discountAmount,
?          total: state.total - discountAmount
?        };

?      case "SET_LOADING":
?        return { ...state, loading: action.payload };

?      case "SET_ERROR":
?        return { ...state, error: action.payload, loading: false };

?      default:
?        return state;
?    }
?  };

?  const [state, dispatch] = useReducer(cartReducer, initialState);

* Clean function calls

?  const addItem = (item) => {
?    dispatch({ type: "ADD_ITEM", payload: item });
?  };

?  const removeItem = (itemId) => {
?    dispatch({ type: "REMOVE_ITEM", payload: itemId });
?  };

?  const applyDiscount = () => {
?    dispatch({ type: "APPLY_DISCOUNT" });
?  };

?  return (
?    <div>
?      <h2>Cart Items: {state.itemCount}</h2>
?      <h3>Total: ₹{state.total}</h3>
?      {state.discount > 0 && <p>Discount: ₹{state.discount}</p>}
?      {/* UI code */}
?    </div>
?  );
? }

# Benefits:

Sab related data ek jagah
Ek dispatch call se multiple updates
Logic centralized aur testable
Consistency guaranteed

# When to Use Which?

| Scenario                             | useState  | useReducer   |
|--------------------------------------|-----------|--------------|
| Simple Counter                       | ✅        | ❌          |
| Toggle (true/false)                  | ✅        | ❌          |
| Single Input Field                   | ✅        | ❌          |
| 3+ Related States                    | ❌        | ✅          |
| Complex State Updates                | ❌        | ✅          |
| Multiple Actions on Same Data        | ❌        | ✅          |
| Next State Depends on Previous       | ❌        | ✅          |
| State Transitions (Workflows)        | ❌        | ✅          |
-------------------------------------------------------------------

# Simple Rule of Thumb:
! Agar tumhe ye sochna pad raha hai:
! "Iss state ko update karne ke liye, kitne aur states update karne padenge?"
→ Use useReducer! 

! Note: useReducer tab use karo jab ek action se bahut saari cheezein update karni ho!