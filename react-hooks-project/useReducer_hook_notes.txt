# -----------------------------useReducer Hook-----------------------------

useReducer is a React Hook that is used for state management in functional components. It is an alternative to useState and is particularly useful for managing complex state logic or when the next state depends on the previous one.

# Syntax

```
? const [state, dispatch] = useReducer(reducer, initialState);
```

- `reducer`: A function that determines how the state should change in response to an action.
- `initialState`: The initial state value.
- `dispatch`: A function that you call with an action object to trigger a state change.
- `Action`: An object that describes the type of state change to be performed.

# Parameters:
reducerFunction - Tumhara logic
initialState - Starting value

Returns:
state - Current state
dispatch - Function to send actions

# Example

```
? import React, { useReducer } from 'react';

? const initialState = { count: 0 };

? function reducer(state, action) {
?  switch (action.type) {
?    case 'increment':
?      return { count: state.count + 1 };
?    case 'decrement':
?      return { count: state.count - 1 };
?    default:
?      throw new Error();
?  }
? 

? function Counter() {
?  const [state, dispatch] = useReducer(reducer, initialState);

?  return (
?    <>
?      Count: {state.count}
?      <button onClick={() => dispatch({ type: 'increment' })}>+</button>
?      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>
?   </>
?  );
? }
```

# What happens on button click?

1. User clicks button
   ↓
2. dispatch({ type: "increase" }) call hota hai
   ↓
3. Reducer function automatically run hota hai:
   reducer(currentState, { type: "increase" })
   ↓
4. Reducer new state return karta hai:
   { count: 1 }
   ↓
5. React component ko re-render karta hai
   ↓
6. UI update hota hai with new count

# When to Use

- When you have complex state logic that involves multiple sub-values.
- When the next state depends on the previous one.
- When you want to optimize performance for components that trigger deep updates.
- When you want to centralize state management logic in a single function (the reducer).


# useReducer Hook - Simple Hinglish Explanation

* useReducer Kya Hai?

`useReducer` ek React hook hai jo complex state management ke liye use hota hai. Jab tumhare paas bahut saare state updates ho aur wo ek dusre se related ho, tab `useState` ke bajaye `useReducer` better option hai.

* Simple analogy: Socho ki tumhare paas ek bank account hai:
- State = Tumhare account ka current balance
- Action = Tum kya karna chahte ho (deposit, withdraw, etc.)
- Reducer = Bank ka cashier jo tumhara action dekhke balance update karta hai
- Dispatch = Tumhara request form jo cashier ko dete ho

# Important Terminologies:

* 1.State
- Ye tumhara current data hai
- Example: `{ count: 0 }`

* 2.Action
- Ye ek object hai jo batata hai Kya karna hai
- Usually isme `type` property hoti hai
- Example: `{ type: "increase" }` ya `{ type: "input", payload: 5 }`

* 3.Reducer Function
- Ye ek pure function hai jo state aur action leta hai
- Aur new state return karta hai
- Format: `(currentState, action) => newState`

* 4.Dispatch
- Ye ek function hai jo action ko reducer tak bhejta hai
- Jab tum `dispatch()` call karte ho, reducer function automatically run hota hai

* 5.Initial State
- Starting value of your state
- Example: `{ count: 0 }`

# Code Explanation - Step by Step:

```
? import React from "react";
? import { useReducer } from "react";

? function UseReducerHook() {
```
Pehle React aur useReducer import kiya. Component banaya.


```
? const initialState = { count: 0 };
```
Initial state define kiya - Shuru mein count 0 hoga.

```
?  const reducerFunction = (state, action) => {
?    console.log(action);
?    if (action.type === "increase") return { count: state.count + 1 };
?    if (action.type === "decrease") return { count: state.count - 1 };
?    if (action.type === "input") return { count: action.payload };
?  };
```
Reducer function - Ye decide karta hai ki different actions pe kya hoga:
- Agar action type `"increase"` hai → count ko 1 se badhao
- Agar action type `"decrease"` hai → count ko 1 se ghatao  
- Agar action type `"input"` hai → count ko payload ki value se replace karo


```
?  const [state, dispatch] = useReducer(reducerFunction, initialState);
```
useReducer hook ko call kiya:
- Pehla parameter: `reducerFunction` (jo state update karega)
- Dusra parameter: `initialState` (starting value)
- Return: 
  - `state` = Current state ka value
  - `dispatch` = Function jo actions bhejne ke liye use hoga

```
?  return (
?    <div>
?      <h1>Let's learn useReducer hook!</h1>
?      <h2>Count: {state.count}</h2>
```
UI mein count display kiya - `state.count` current value show karega.

```
?      <button
?        onClick={() => {
?          dispatch({ type: "increase" });
?        }}
?      >
?        Increase Count
?      </button>
```
Increase button - Jab click hoga:
- `dispatch()` call hoga
- Action object bhejega: `{ type: "increase" }`
- Reducer function chalega aur count badhega

! Note: `state` ko action mein bhejne ki zarurat nahi hai - reducer ko automatically mil jata hai.

```
?      <button onClick={() => dispatch({ type: "decrease" })}>
?        Decrease Count
?      </button>
```
Decrease button - Similar, count ghatane ke liye.

```
?      <input
?        type="number"
?        value={state.count}
?        onChange={(e) => {
?          dispatch({ type: "input", payload: Number(e.target.value) });
?        }}
?      />
```
Input field:
- Value: `state.count` (controlled input)
- OnChange: Jab user type kare, `dispatch()` call hota hai
- Action: `{ type: "input", payload: Number(e.target.value) }`
- `payload` mein user ka typed number jata hai
- Reducer function directly count ko is value se replace kar deta hai

# Flow Samjho:

1. User button click karta hai ya input mein type karta hai
2. `dispatch()` ek action object bhejta hai
3. Reducer function us action ko dekhta hai
4. Action type ke basis pe new state return karta hai
5. React component re-render hota hai with new state
6. UI update ho jata hai

! Summary: `useReducer` tab use karo jab tumhare state logic complex ho. Ye tumhe cleaner aur predictable code deta hai!

# -----------------------------useReducer Hook - Initial State Types Explained-----------------------------

`initialState` kisi bhi type ka ho sakta hai. Object banana compulsory nahi hai!

* Different Types of Initial State:

# 1. Number (Sabse Simple)

```
? const initialState = 0; 

? const reducer = (state, action) => {
?  if (action.type === "increase") return state + 1;
?  if (action.type === "decrease") return state - 1;
?  return state;
? };

? const [count, dispatch] = useReducer(reducer, initialState);
? Use: <h2>{count}</h2>
```

# 2. String
```
? const initialState = "Hello";

? const reducer = (state, action) => {
?  if (action.type === "greet") return "Hello! How are you?";
?  if (action.type === "goodbye") return "Bye!";
?  return state;
? };

? const [message, dispatch] = useReducer(reducer, initialState);
```

# 3. Boolean
```
? const initialState = false;

? const reducer = (state, action) => {
?  if (action.type === "toggle") return !state;
?  return state;
? };

? const [isOpen, dispatch] = useReducer(reducer, initialState);
```

# 4. Array
```
? const initialState = [];

? const reducer = (state, action) => {
?  if (action.type === "add") return [...state, action.payload];
?  if (action.type === "remove") return state.filter(item => item.id !== action.payload);
?  return state;
? };

? const [items, dispatch] = useReducer(reducer, initialState);
```

# 5. Object (Tumhara Example - Multiple Values Ke Liye Best)
```
? const initialState = { count: 0, name: "User", isLoggedIn: false };

? const reducer = (state, action) => {
?  if (action.type === "increase") return { ...state, count: state.count + 1 };
?  if (action.type === "login") return { ...state, isLoggedIn: true };
?  return state;
? };

? const [state, dispatch] = useReducer(reducer, initialState);
```

---

# Kab Object Use Karein?

Object use karo jab:
- Multiple related values manage karni ho
- Example: `{ count: 0, loading: false, error: null }`

Simple value use karo jab:
- Sirf ek hi value track karni ho
- Example: counter, toggle, etc.

# Key Points:

1. Flexibility hai - Number, string, boolean, array, object - kuch bhi use kar sakte ho
2. Object tab better hai jab multiple values ek saath manage karni ho
3. Simple value tab better hai jab sirf ek cheez track karni ho
4. Tumhare original code mein object isliye tha kyunki future mein aur properties add kar sakte the
5. Reducer function mein state ko mutate mat karo - hamesha naya object/array return karo (spread operator use karke)

# Important: payload naam dena optional convention hai. Tum koi bhi naam use kar sakte ho:
{ type: "add", value: 10 }      // ✅
{ type: "add", amount: 10 }     // ✅
{ type: "add", data: 10 }       // ✅
{ type: "add", payload: 10 }    // ✅ (most common)